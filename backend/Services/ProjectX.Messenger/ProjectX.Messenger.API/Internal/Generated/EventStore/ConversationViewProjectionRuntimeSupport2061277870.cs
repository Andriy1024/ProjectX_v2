// <auto-generated/>
#pragma warning disable
using Marten;
using Marten.Events.Aggregation;
using Marten.Internal.Storage;
using ProjectX.Messenger.Persistence.Projections;
using System;
using System.Linq;

namespace Marten.Generated.EventStore
{
    // START: ConversationViewProjectionLiveAggregation2061277870
    public class ConversationViewProjectionLiveAggregation2061277870 : Marten.Events.Aggregation.SyncLiveAggregatorBase<ProjectX.Messenger.Domain.ConversationView>
    {
        private readonly ProjectX.Messenger.Persistence.Projections.ConversationViewProjection _conversationViewProjection;

        public ConversationViewProjectionLiveAggregation2061277870(ProjectX.Messenger.Persistence.Projections.ConversationViewProjection conversationViewProjection)
        {
            _conversationViewProjection = conversationViewProjection;
        }


        public System.Action<ProjectX.Messenger.Domain.ConversationView, ProjectX.Messenger.Domain.ConversationStarted> ProjectEvent1 {get; set;}

        public System.Action<ProjectX.Messenger.Domain.ConversationView, ProjectX.Messenger.Domain.MessageCreated> ProjectEvent2 {get; set;}

        public System.Action<ProjectX.Messenger.Domain.ConversationView, ProjectX.Messenger.Domain.MessageUpdated> ProjectEvent3 {get; set;}

        public System.Action<ProjectX.Messenger.Domain.ConversationView, ProjectX.Messenger.Domain.MessageDeleted> ProjectEvent4 {get; set;}


        public override ProjectX.Messenger.Domain.ConversationView Build(System.Collections.Generic.IReadOnlyList<Marten.Events.IEvent> events, Marten.IQuerySession session, ProjectX.Messenger.Domain.ConversationView snapshot)
        {
            if (!events.Any()) return null;
            ProjectX.Messenger.Domain.ConversationView conversationView = null;
            snapshot ??= Create(events[0], session);
            foreach (var @event in events)
            {
                snapshot = Apply(@event, snapshot, session);
            }

            return snapshot;
        }


        public ProjectX.Messenger.Domain.ConversationView Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new ProjectX.Messenger.Domain.ConversationView();
        }


        public ProjectX.Messenger.Domain.ConversationView Apply(Marten.Events.IEvent @event, ProjectX.Messenger.Domain.ConversationView aggregate, Marten.IQuerySession session)
        {
            switch (@event)
            {
                case Marten.Events.IEvent<ProjectX.Messenger.Domain.ConversationStarted> event_ConversationStarted1:
                    aggregate.Apply(event_ConversationStarted1.Data);
                    ProjectEvent1.Invoke(aggregate, event_ConversationStarted1.Data);
                    break;
                case Marten.Events.IEvent<ProjectX.Messenger.Domain.MessageCreated> event_MessageCreated2:
                    aggregate.Apply(event_MessageCreated2.Data);
                    ProjectEvent2.Invoke(aggregate, event_MessageCreated2.Data);
                    break;
                case Marten.Events.IEvent<ProjectX.Messenger.Domain.MessageDeleted> event_MessageDeleted3:
                    aggregate.Apply(event_MessageDeleted3.Data);
                    ProjectEvent4.Invoke(aggregate, event_MessageDeleted3.Data);
                    break;
                case Marten.Events.IEvent<ProjectX.Messenger.Domain.MessageUpdated> event_MessageUpdated4:
                    aggregate.Apply(event_MessageUpdated4.Data);
                    ProjectEvent3.Invoke(aggregate, event_MessageUpdated4.Data);
                    break;
            }

            return aggregate;
        }

    }

    // END: ConversationViewProjectionLiveAggregation2061277870
    
    
    // START: ConversationViewProjectionInlineHandler2061277870
    public class ConversationViewProjectionInlineHandler2061277870 : Marten.Events.Aggregation.CrossStreamAggregationRuntime<ProjectX.Messenger.Domain.ConversationView, string>
    {
        private readonly Marten.IDocumentStore _store;
        private readonly Marten.Events.Aggregation.IAggregateProjection _projection;
        private readonly Marten.Events.Aggregation.IEventSlicer<ProjectX.Messenger.Domain.ConversationView, string> _slicer;
        private readonly Marten.Internal.Storage.IDocumentStorage<ProjectX.Messenger.Domain.ConversationView, string> _storage;
        private readonly ProjectX.Messenger.Persistence.Projections.ConversationViewProjection _conversationViewProjection;

        public ConversationViewProjectionInlineHandler2061277870(Marten.IDocumentStore store, Marten.Events.Aggregation.IAggregateProjection projection, Marten.Events.Aggregation.IEventSlicer<ProjectX.Messenger.Domain.ConversationView, string> slicer, Marten.Internal.Storage.IDocumentStorage<ProjectX.Messenger.Domain.ConversationView, string> storage, ProjectX.Messenger.Persistence.Projections.ConversationViewProjection conversationViewProjection) : base(store, projection, slicer, storage)
        {
            _store = store;
            _projection = projection;
            _slicer = slicer;
            _storage = storage;
            _conversationViewProjection = conversationViewProjection;
        }


        public System.Action<ProjectX.Messenger.Domain.ConversationView, ProjectX.Messenger.Domain.ConversationStarted> ProjectEvent1 {get; set;}

        public System.Action<ProjectX.Messenger.Domain.ConversationView, ProjectX.Messenger.Domain.MessageCreated> ProjectEvent2 {get; set;}

        public System.Action<ProjectX.Messenger.Domain.ConversationView, ProjectX.Messenger.Domain.MessageUpdated> ProjectEvent3 {get; set;}

        public System.Action<ProjectX.Messenger.Domain.ConversationView, ProjectX.Messenger.Domain.MessageDeleted> ProjectEvent4 {get; set;}


        public override async System.Threading.Tasks.ValueTask<ProjectX.Messenger.Domain.ConversationView> ApplyEvent(Marten.IQuerySession session, Marten.Events.Projections.EventSlice<ProjectX.Messenger.Domain.ConversationView, string> slice, Marten.Events.IEvent evt, ProjectX.Messenger.Domain.ConversationView aggregate, System.Threading.CancellationToken cancellationToken)
        {
            switch (evt)
            {
                case Marten.Events.IEvent<ProjectX.Messenger.Domain.ConversationStarted> event_ConversationStarted5:
                    aggregate ??= new ProjectX.Messenger.Domain.ConversationView();
                    ProjectEvent1.Invoke(aggregate, event_ConversationStarted5.Data);
                    return aggregate;
                case Marten.Events.IEvent<ProjectX.Messenger.Domain.MessageUpdated> event_MessageUpdated8:
                    aggregate ??= new ProjectX.Messenger.Domain.ConversationView();
                    ProjectEvent3.Invoke(aggregate, event_MessageUpdated8.Data);
                    return aggregate;
                case Marten.Events.IEvent<ProjectX.Messenger.Domain.MessageCreated> event_MessageCreated6:
                    aggregate ??= new ProjectX.Messenger.Domain.ConversationView();
                    ProjectEvent2.Invoke(aggregate, event_MessageCreated6.Data);
                    return aggregate;
                case Marten.Events.IEvent<ProjectX.Messenger.Domain.MessageDeleted> event_MessageDeleted7:
                    aggregate ??= new ProjectX.Messenger.Domain.ConversationView();
                    ProjectEvent4.Invoke(aggregate, event_MessageDeleted7.Data);
                    return aggregate;
            }

            return aggregate;
        }


        public ProjectX.Messenger.Domain.ConversationView Create(Marten.Events.IEvent @event, Marten.IQuerySession session)
        {
            return new ProjectX.Messenger.Domain.ConversationView();
        }

    }

    // END: ConversationViewProjectionInlineHandler2061277870
    
    
}

